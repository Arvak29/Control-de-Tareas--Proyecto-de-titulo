/*/// Drop Table ///*/

DROP TABLE PORCENTAJE_GLOBAL CASCADE CONSTRAINTS;
DROP TABLE EMPRESA CASCADE CONSTRAINTS;
DROP TABLE TAREA CASCADE CONSTRAINTS;
DROP TABLE TAREA_SUBORDINADA CASCADE CONSTRAINTS;
DROP TABLE FLUJO_TAREA CASCADE CONSTRAINTS;
DROP TABLE UNIDAD_INTERNA CASCADE CONSTRAINTS;
DROP TABLE ROL CASCADE CONSTRAINTS;
DROP TABLE CARGO CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;
DROP TABLE NOTIFICACION CASCADE CONSTRAINTS;
DROP TABLE REPORTE_PROBLEMA CASCADE CONSTRAINTS;
DROP TABLE ASIGNACION_TAREA CASCADE CONSTRAINTS;
DROP TABLE ASIGNACION_TAREA_SUBORDINADA CASCADE CONSTRAINTS;
DROP TABLE EJECUCION_FLUJO_TAREA CASCADE CONSTRAINTS;

-----------------------------------------------------------------------------------------------------------------------------------

/*/// Create Table ///*/


CREATE TABLE PORCENTAJE_GLOBAL (
    id_pg             NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    avance_pg         NUMBER(6)
);

CREATE TABLE FLUJO_TAREA (
    id_ft                     NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_ft                 VARCHAR2(100) NOT NULL,
    descripcion_ft            VARCHAR2(300) NOT NULL,
    fecha_inicio_ft           DATE,
    fecha_entrega_ft          DATE,
    fecha_entrega_efectiva_ft DATE,
    porcentaje_avance_ft      NUMBER(6),
    estado_ft                 VARCHAR2(15),
    indicador_ft              VARCHAR2(10)
);

CREATE TABLE TAREA (
    id_t                     NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_t                 VARCHAR2(100) NOT NULL,
    descripcion_t            VARCHAR2(300) NOT NULL,
    fecha_inicio_t           DATE,
    fecha_entrega_t          DATE NOT NULL,
    fecha_entrega_efectiva_t DATE,
    porcentaje_avance_t      NUMBER(6),
    estado_t                 VARCHAR2(15),
    indicador_t              VARCHAR2(10)
);

CREATE TABLE TAREA_SUBORDINADA (
    id_ts                     NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_ts	              VARCHAR2(100) NOT NULL,
    descripcion_ts            VARCHAR2(300) NOT NULL,
    fecha_inicio_ts           DATE,
    fecha_entrega_ts          DATE NOT NULL,
    fecha_entrega_efectiva_ts DATE,
    porcentaje_avance_ts      NUMBER(6),
    estado_ts                 VARCHAR2(15),
    indicador_ts              VARCHAR2(10),
    id_t                      NUMBER(6),
    id_ft                     NUMBER(6)
);

CREATE TABLE REPORTE_PROBLEMA (
    id_rp                   NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    asunto_n                VARCHAR2(60) NOT NULL,
    descripcion_rp          VARCHAR2(300),
    id_t                    NUMBER(6),
    id_ts                   NUMBER(6),
    id_ft                   NUMBER(6)
);

CREATE TABLE UNIDAD_INTERNA (
    id_ui                   NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_ui               VARCHAR2(60) NOT NULL
);

CREATE TABLE ROL (
    id_r                    NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_r                VARCHAR2(60) NOT NULL
);

CREATE TABLE CARGO (
    id_c                    NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_c                VARCHAR2(60) NOT NULL,
    supervisor_c            VARCHAR2(60),   
    id_ui                   NUMBER(6) NOT NULL,
    id_r                    NUMBER(6) NOT NULL
);

CREATE TABLE EMPRESA (
    id_e                   NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_e               VARCHAR2(60) NOT NULL
);

CREATE TABLE USUARIO (
    id_u                    NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    nombre_u                VARCHAR2(60) NOT NULL,
    email_u                 VARCHAR2(90) NOT NULL,
    password_u              VARCHAR2(30) NOT NULL,
    id_c                    NUMBER(6) NOT NULL,
    id_e		            NUMBER(6) NOT NULL
);

CREATE TABLE NOTIFICACION (
    id_n                    NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY NOT NULL,
    asunto_n                VARCHAR2(60) NOT NULL,
    descripcion_n           VARCHAR2(300) NOT NULL,
    id_u        		    NUMBER(6) NOT NULL
);

CREATE TABLE ASIGNACION_TAREA (
    id_u_at                  NUMBER(6),
    id_t_at                  NUMBER(6),
    respuesta_at             VARCHAR2(30) NOT NULL,
    justificacion_at        VARCHAR2(300),
    CONSTRAINT ASIG_T_USUARIO FOREIGN KEY (id_u_at) REFERENCES USUARIO (id_u),
    CONSTRAINT ASIG_T_TAREA FOREIGN KEY (id_t_at) REFERENCES TAREA (id_t)
);

CREATE TABLE ASIGNACION_TAREA_SUBORDINADA (
    id_u_ats                  NUMBER(6),
    id_ts_ats                 NUMBER(6),
    respuesta_ats             VARCHAR2(30) NOT NULL,
    justificacion_ats         VARCHAR2(300),
    CONSTRAINT ASIG_TS_USUARIO FOREIGN KEY (id_u_ats) REFERENCES USUARIO (id_u),
    CONSTRAINT ASIG_TS_TAREA FOREIGN KEY (id_ts_ats) REFERENCES TAREA_SUBORDINADA (id_ts)
);

CREATE TABLE EJECUCION_FLUJO_TAREA(
    id_u_eft                 NUMBER(6),
    id_ft_eft                NUMBER(6),
    respuesta_eft            VARCHAR2(30) NOT NULL,
    justificacion_eft        VARCHAR2(300),
    CONSTRAINT EJEC_FT_USUARIO FOREIGN KEY (id_u_eft) REFERENCES USUARIO (id_u),
    CONSTRAINT EJEC_FT_TAREA FOREIGN KEY (id_ft_eft) REFERENCES FLUJO_TAREA (id_ft)
);

-----------------------------------------------------------------------------------------------------------------------------------
/*/// Alter Table ///*/

  /* Tareas subordinadas */
ALTER TABLE TAREA_SUBORDINADA ADD CONSTRAINT id_t_fk FOREIGN KEY (id_t) REFERENCES tarea (id_t) NOT DEFERRABLE;
ALTER TABLE TAREA_SUBORDINADA ADD CONSTRAINT id_ft_fk FOREIGN KEY (id_ft) REFERENCES flujo_tarea (id_ft) NOT DEFERRABLE;


  /* Reportar problema */
ALTER TABLE REPORTE_PROBLEMA ADD CONSTRAINT id_rp_t_fk FOREIGN KEY (id_t) REFERENCES tarea (id_t) NOT DEFERRABLE;
ALTER TABLE REPORTE_PROBLEMA ADD CONSTRAINT id_rp_ts_fk FOREIGN KEY (id_ts) REFERENCES tarea_subordinada (id_ts) NOT DEFERRABLE;
ALTER TABLE REPORTE_PROBLEMA ADD CONSTRAINT id_rp_ft_fk FOREIGN KEY (id_ft) REFERENCES flujo_tarea (id_ft) NOT DEFERRABLE;

  /* Cargo */
ALTER TABLE CARGO ADD CONSTRAINT id_c_ui_fk FOREIGN KEY (id_ui) REFERENCES UNIDAD_INTERNA (id_ui) NOT DEFERRABLE;
ALTER TABLE CARGO ADD CONSTRAINT id_c_r_fk FOREIGN KEY (id_r) REFERENCES rol (id_r) NOT DEFERRABLE;

  /* Usuario */
ALTER TABLE USUARIO ADD CONSTRAINT id_c_u_fk FOREIGN KEY (id_c) REFERENCES cargo (id_c) NOT DEFERRABLE;
ALTER TABLE USUARIO ADD CONSTRAINT id_e_u_fk FOREIGN KEY (id_e) REFERENCES EMPRESA (id_e) NOT DEFERRABLE;

  /* Notificaci√≥n */
ALTER TABLE NOTIFICACION ADD CONSTRAINT id_u_n_fk FOREIGN KEY (id_u) REFERENCES USUARIO (id_u) NOT DEFERRABLE;
-----------------------------------------------------------------------------------------------------------------------------------
/*/// VISTAS ///*/

/* VISTA USUARIO */

CREATE OR REPLACE VIEW VISTA_USUARIO AS
SELECT u.id_u, u.nombre_u, u.email_u, u.password_u, r.nombre_r, c.nombre_c, ui.nombre_ui, e.nombre_e 
FROM usuario U 
JOIN cargo C
ON (u.id_c = c.id_c)
JOIN unidad_interna UI
ON (c.id_ui = ui.id_ui)
JOIN rol R
ON (c.id_r = r.id_r)
JOIN empresa E
ON (u.id_e = e.id_e)
ORDER BY u.id_u DESC;

/* VISTA CARGO */

CREATE OR REPLACE VIEW VISTA_CARGO AS
SELECT c.id_c, c.nombre_c, ui.nombre_ui, r.nombre_r
FROM cargo C 
JOIN unidad_interna UI
ON (c.id_ui = ui.id_ui)
JOIN rol R
ON (c.id_r = r.id_r)
ORDER BY c.id_c DESC;

/* VISTA TAREA */

CREATE OR REPLACE VIEW VISTA_TAREA AS
SELECT t.id_t, t.nombre_t, t.descripcion_t, t.fecha_inicio_t, t.fecha_entrega_t, t.porcentaje_avance_t, t.estado_t, u.nombre_u, ts.nombre_ts 
FROM tarea T
LEFT JOIN tarea_subordinada ts
ON (t.id_t = ts.id_t)
LEFT JOIN asignacion_tarea AT 
ON (t.id_t = at.id_t_at)
LEFT JOIN usuario U
ON (u.id_u = at.id_u_at)
ORDER BY t.id_t DESC;

/* VISTA TAREA SUBORDINADA DE TAREA */

CREATE OR REPLACE VIEW VISTA_TAREA_SUB_TAREA AS
SELECT ts.id_ts, ts.nombre_ts, ts.descripcion_ts, ts.fecha_inicio_ts, ts.fecha_entrega_ts, ts.porcentaje_avance_ts, ts.estado_ts, u.nombre_u, t.nombre_t 
FROM tarea_subordinada TS
LEFT JOIN tarea T
ON (ts.id_t = t.id_t)
LEFT JOIN asignacion_tarea_subordinada ATS 
ON (ts.id_ts = ats.id_ts_ats)
LEFT JOIN usuario U
ON (u.id_u = ats.id_u_ats)
ORDER BY t.id_t DESC;

/* VISTA FLUJO DE TAREA */

CREATE OR REPLACE VIEW VISTA_FLUJO_TAREA AS
SELECT ft.id_ft, ft.nombre_ft, ft.descripcion_ft, ft.fecha_inicio_ft, ft.fecha_entrega_ft, ft.porcentaje_avance_ft, ft.estado_ft ,u.nombre_u, ts.nombre_ts 
FROM flujo_tarea FT
LEFT JOIN tarea_subordinada ts
ON (ft.id_ft = ts.id_ts)
LEFT JOIN ejecucion_flujo_tarea EFT 
ON (ft.id_ft = eft.id_ft_eft)
LEFT JOIN usuario U
ON (u.id_u = eft.id_u_eft)
ORDER BY ft.id_ft DESC;

/* VISTA TAREA SUBORDINADA DE FLUJO DE TAREA */

CREATE OR REPLACE VIEW VISTA_TAREA_SUB_FLUJO_TAREA AS
SELECT ft.id_ft, ts.nombre_ts, ts.descripcion_ts, ts.fecha_inicio_ts, ts.fecha_entrega_ts, ts.porcentaje_avance_ts, ts.estado_ts, u.nombre_u, ft.nombre_ft
FROM tarea_subordinada TS 
LEFT JOIN flujo_tarea FT 
ON (ts.id_ft = ft.id_ft)
LEFT JOIN ejecucion_flujo_tarea EFT 
ON (ft.id_ft = eft.id_ft_eft)
LEFT JOIN usuario U
ON (u.id_u = eft.id_u_eft)
ORDER BY ft.id_ft DESC;

/* VISTA REPORTE DE TAREA */

CREATE OR REPLACE VIEW VISTA_REPORTE_TAREA AS
SELECT t.id_t, t.nombre_t, rp.descripcion_rp
FROM REPORTE_PROBLEMA RP 
JOIN tarea T 
ON (rp.id_t = t.id_t)
ORDER BY t.id_t DESC;

/* VISTA REPORTE TAREA SUBORDINADA */

CREATE OR REPLACE VIEW VISTA_REPORTE_TAREA_SUB AS
SELECT ts.id_ts, ts.nombre_ts, rp.descripcion_rp
FROM REPORTE_PROBLEMA RP 
JOIN tarea_subordinada TS 
ON (rp.id_t = ts.id_ts)
ORDER BY ts.id_ts DESC;

/* VISTA REPORTE DE TAREA DE FLUJO DE TAREA */

CREATE OR REPLACE VIEW VISTA_REPORTE_FLUJO_TAREA AS
SELECT ft.id_ft, ft.nombre_ft, rp.descripcion_rp
FROM REPORTE_PROBLEMA RP 
JOIN flujo_tarea FT 
ON (rp.id_ft = ft.id_ft)
ORDER BY ft.id_ft DESC;

/* VISTA ASIGNACION_TAREA */

CREATE OR REPLACE VIEW VISTA_ASIGNACION_TAREA AS
SELECT t.id_t, u.nombre_u, t.nombre_t, at.respuesta_at, at.justificacion_at
FROM asignacion_tarea AT 
LEFT JOIN usuario U
ON (at.id_u_at = u.id_u)
LEFT JOIN tarea T
ON (at.id_t_at = t.id_t)
ORDER BY t.id_t DESC;

/* VISTA ASIGNACION_TAREA_SUBORDINADA */

CREATE OR REPLACE VIEW VISTA_ASIGNACION_TAREA_SUB AS
SELECT ts.id_ts, u.nombre_u, ts.nombre_ts, ats.respuesta_ats, ats.justificacion_ats
FROM asignacion_tarea_subordinada ATS 
LEFT JOIN usuario U
ON (ats.id_u_ats = u.id_u)
LEFT JOIN tarea_subordinada TS
ON (ats.id_ts_ats = ts.id_ts)
ORDER BY ts.id_ts DESC;

/* VISTA EJECUCION FLUJO TAREA */

CREATE OR REPLACE VIEW VISTA_EJECUCION_FLUJO_TAREA AS
SELECT ft.id_ft, u.nombre_u, ft.nombre_ft, at.respuesta_eft, at.justificacion_eft
FROM ejecucion_flujo_tarea AT 
LEFT JOIN usuario U
ON (at.id_u_eft = u.id_u)
LEFT JOIN flujo_tarea FT
ON (at.id_ft_eft = ft.id_ft)
ORDER BY ft.id_ft DESC;

/* VISTA RESUMEN TAREAS POR UNIDAD INTERNA */

CREATE OR REPLACE VIEW VISTA_TAREAS_UNIDAD_INTERNA AS
SELECT t.id_t, ui.id_ui, t.nombre_t, ui.nombre_ui
FROM TAREA T
LEFT JOIN ASIGNACION_TAREA AT
ON (t.id_t = at.id_t_at)
LEFT JOIN USUARIO U
ON (u.id_u = at.id_u_at)
LEFT JOIN CARGO C
ON (u.id_c = c.id_c)
LEFT JOIN UNIDAD_INTERNA UI
ON (c.id_ui = ui.id_ui)
where ui.id_ui >= 1;

/* VISTA RESUMEN CARGA TRABAJO */

CREATE OR REPLACE VIEW VISTA_CARGA_TRABAJO AS
SELECT t.id_t, c.supervisor_c, r.nombre_r, c.nombre_c
FROM TAREA T
LEFT JOIN ASIGNACION_TAREA AT
ON (at.id_t_at = t.id_t)
LEFT JOIN USUARIO U
ON (u.id_u = at.id_u_at)
LEFT JOIN CARGO C
ON (c.id_c = u.id_c)
LEFT JOIN ROL R
ON (r.id_r = c.id_r)
WHERE c.supervisor_c IS NOT NULL;

/* VISTA RESPONSABLE TAREA */

CREATE OR REPLACE VIEW VISTA_RESPONSABLE_TAREA AS
SELECT u.id_u, u.nombre_u, t.id_t, t.nombre_t, t.indicador_t
FROM tarea T
JOIN ASIGNACION_TAREA AT
ON (at.id_t_at = t.id_t)
JOIN USUARIO U
ON (at.id_u_at = u.id_u)
WHERE at.ID_T_AT >= 1
ORDER BY t.id_t DESC;

/* VISTA RESPONSABLE TAREA SUBORDINADA*/

CREATE OR REPLACE VIEW VISTA_RESPONSABLE_TAREA_SUB AS
SELECT u.id_u, u.nombre_u, ts.id_ts, ts.nombre_ts, ts.indicador_ts
FROM tarea_SUBORDINADA TS
JOIN ASIGNACION_TAREA_SUBORDINADA ATS
ON (ats.id_ts_ats = ts.id_ts)
JOIN USUARIO U
ON (ats.id_u_ats = u.id_u)
WHERE ats.ID_TS_ATS >= 1
ORDER BY ts.id_ts DESC;

/* VISTA RESPONSABLE FLUJO TAREA */

CREATE OR REPLACE VIEW VISTA_RESPONSABLE_FLUJO_TAREA AS
SELECT u.id_u, u.nombre_u, ft.id_ft, ft.nombre_ft, ft.indicador_ft
FROM flujo_tarea FT
JOIN EJECUCION_FLUJO_TAREA EFT
ON (eft.id_ft_eft = ft.id_ft)
JOIN USUARIO U
ON (eft.id_u_eft = u.id_u)
WHERE eft.ID_ft_eft >= 1
ORDER BY ft.id_ft DESC;
----------------------------------------------------------------------------------------------------------------------------------
/*/// INSERT ANTES DE TRIGGER ///*/

insert into porcentaje_global values ('', 0);

-----------------------------------------------------------------------------------------------------------------------------------
/*/// TRIGGER ///*/

//* TRIGGER CALCULO AVANCE GLOBAL EN BASE A TAREA*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_GLOBAL_T
AFTER INSERT ON TAREA
DECLARE 
            V_TAREA             NUMBER(10);
            V_TAREA_SUBORDINADA NUMBER(10);
            V_FLUJO_TAREA       NUMBER(10);             
            V_GLOBAL            NUMBER(10);
            CURSOR c_t IS SELECT * FROM TAREA;
            CURSOR c_ts IS SELECT * FROM TAREA_SUBORDINADA;
            CURSOR c_ft IS SELECT * FROM FLUJO_TAREA;
            CURSOR c_pg is select * from porcentaje_global;
            BEGIN
            FOR V_FILA_T IN C_T
            LOOP
               SELECT AVG(PORCENTAJE_AVANCE_T)
               INTO V_TAREA
               FROM TAREA;
               FOR V_FILA_TS IN C_TS
               LOOP
                    SELECT AVG(PORCENTAJE_AVANCE_TS)
                    INTO V_TAREA_SUBORDINADA
                    FROM TAREA_SUBORDINADA;
                    FOR V_FILA_FT IN C_FT
                    LOOP
                        SELECT AVG(PORCENTAJE_AVANCE_FT)
                        INTO V_FLUJO_TAREA
                        FROM FLUJO_TAREA;
                        
                        V_GLOBAL := ((V_TAREA + V_TAREA_SUBORDINADA + V_FLUJO_TAREA)/3);
                            FOR V_FILA_PG IN C_PG
                            LOOP
                                IF V_FILA_PG.ID_PG IS NOT NULL THEN
                                    UPDATE PORCENTAJE_GLOBAL 
                                    SET AVANCE_PG = V_GLOBAL
                                    WHERE V_FILA_PG.ID_PG = ID_PG;
                                ELSIF V_FILA_PG.ID_PG IS NULL THEN
                                    INSERT INTO PORCENTAJE_GLOBAL (id_pg, avance_pg) VALUES ('', V_GLOBAL);
                                END IF;
                            END LOOP;
                        END LOOP;
                    END LOOP;
            END LOOP;
END TGR_CALC_AVANCE_GLOBAL_T;

/* TRIGGER CALCULO AVANCE GLOBAL EN BASE A TAREA SUBORDINADA*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_GLOBAL_TS
AFTER INSERT ON TAREA_SUBORDINADA
DECLARE 
            V_TAREA             NUMBER(10);
            V_TAREA_SUBORDINADA NUMBER(10);
            V_FLUJO_TAREA       NUMBER(10);             
            V_GLOBAL            NUMBER(10);
            CURSOR c_t IS SELECT * FROM TAREA;
            CURSOR c_ts IS SELECT * FROM TAREA_SUBORDINADA;
            CURSOR c_ft IS SELECT * FROM FLUJO_TAREA;
            CURSOR c_pg is select * from porcentaje_global;
            BEGIN
            FOR V_FILA_T IN C_T
            LOOP
               SELECT AVG(PORCENTAJE_AVANCE_T)
               INTO V_TAREA
               FROM TAREA;
               FOR V_FILA_TS IN C_TS
               LOOP
                    SELECT AVG(PORCENTAJE_AVANCE_TS)
                    INTO V_TAREA_SUBORDINADA
                    FROM TAREA_SUBORDINADA;
                    FOR V_FILA_FT IN C_FT
                    LOOP
                        SELECT AVG(PORCENTAJE_AVANCE_FT)
                        INTO V_FLUJO_TAREA
                        FROM FLUJO_TAREA;
                        
                        V_GLOBAL := ((V_TAREA + V_TAREA_SUBORDINADA + V_FLUJO_TAREA)/3);
                            FOR V_FILA_PG IN C_PG
                            LOOP
                                IF V_FILA_PG.ID_PG IS NOT NULL THEN
                                    UPDATE PORCENTAJE_GLOBAL 
                                    SET AVANCE_PG = V_GLOBAL
                                    WHERE V_FILA_PG.ID_PG = ID_PG;
                                ELSIF V_FILA_PG.ID_PG IS NULL THEN
                                    INSERT INTO PORCENTAJE_GLOBAL (id_pg, avance_pg) VALUES ('', V_GLOBAL);
                                END IF;
                            END LOOP;
                        END LOOP;
                    END LOOP;
            END LOOP;
END TGR_CALC_AVANCE_GLOBAL_TS;

/* TRIGGER CALCULO AVANCE GLOBAL EN BASE A FLUJO TAREA*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_GLOBAL_FT
AFTER INSERT ON FLUJO_TAREA
DECLARE 
            V_TAREA             NUMBER(10);
            V_TAREA_SUBORDINADA NUMBER(10);
            V_FLUJO_TAREA       NUMBER(10);             
            V_GLOBAL            NUMBER(10);
            CURSOR c_t IS SELECT * FROM TAREA;
            CURSOR c_ts IS SELECT * FROM TAREA_SUBORDINADA;
            CURSOR c_ft IS SELECT * FROM FLUJO_TAREA;
            CURSOR c_pg is select * from porcentaje_global;
            BEGIN
            FOR V_FILA_T IN C_T
            LOOP
               SELECT AVG(PORCENTAJE_AVANCE_T)
               INTO V_TAREA
               FROM TAREA;
               FOR V_FILA_TS IN C_TS
               LOOP
                    SELECT AVG(PORCENTAJE_AVANCE_TS)
                    INTO V_TAREA_SUBORDINADA
                    FROM TAREA_SUBORDINADA;
                    FOR V_FILA_FT IN C_FT
                    LOOP
                        SELECT AVG(PORCENTAJE_AVANCE_FT)
                        INTO V_FLUJO_TAREA
                        FROM FLUJO_TAREA;
                        
                        V_GLOBAL := ((V_TAREA + V_TAREA_SUBORDINADA + V_FLUJO_TAREA)/3);
                            FOR V_FILA_PG IN C_PG
                            LOOP
                                IF V_FILA_PG.ID_PG IS NOT NULL THEN
                                    UPDATE PORCENTAJE_GLOBAL 
                                    SET AVANCE_PG = V_GLOBAL
                                    WHERE V_FILA_PG.ID_PG = ID_PG;
                                ELSIF V_FILA_PG.ID_PG IS NULL THEN
                                    INSERT INTO PORCENTAJE_GLOBAL (id_pg, avance_pg) VALUES ('', V_GLOBAL);
                                END IF;
                            END LOOP;
                        END LOOP;
                    END LOOP;
            END LOOP;
END TGR_CALC_AVANCE_GLOBAL_FT;

/* TRIGGER CALCULO AVANCE TAREA SUBORDINADA FUNCIONAL*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_TAREA_SUB
FOR UPDATE OF ESTADO_TS ON TAREA_SUBORDINADA
COMPOUND TRIGGER
TYPE r_tarea_subordinada_type IS RECORD(
    id_ts tarea_subordinada.id_ts%TYPE,
    fecha_inicio_ts tarea_subordinada.fecha_inicio_ts%TYPE,
    fecha_entrega_ts tarea_subordinada.fecha_entrega_ts%TYPE
);

TYPE t_tarea_subordinada_type IS TABLE OF r_tarea_subordinada_type
    INDEX BY PLS_INTEGER;
    
t_tarea_subordinada t_tarea_subordinada_type;

AFTER EACH ROW IS
BEGIN
t_tarea_subordinada (t_tarea_subordinada.COUNT +1).id_ts := :NEW.id_ts;
t_tarea_subordinada (t_tarea_subordinada.COUNT).fecha_inicio_ts := :NEW.fecha_inicio_ts;
t_tarea_subordinada (t_tarea_subordinada.COUNT).fecha_entrega_ts := :NEW.fecha_entrega_ts;
END AFTER EACH ROW;
    AFTER STATEMENT IS
                V_PROGRESO_ACTUAL NUMBER(10);
                V_FECHA_INICIO DATE;
                V_ESTADO STRING(10);
                CURSOR c_ts IS SELECT id_ts FROM tarea_subordinada;
            BEGIN
                for v_fila in c_ts 
                LOOP
                    SELECT ROUND(ROUND(SYSDATE - fecha_inicio_ts)*100/(fecha_entrega_ts - fecha_inicio_ts)), fecha_inicio_ts, estado_ts
                    INTO V_PROGRESO_ACTUAL, V_FECHA_INICIO, V_ESTADO
                    FROM tarea_subordinada
                    WHERE v_fila.id_ts = id_ts;
                    IF V_PROGRESO_ACTUAL <=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE tarea_subordinada
                        SET porcentaje_avance_ts = V_PROGRESO_ACTUAL
                        WHERE v_fila.id_ts = id_ts;
                    ELSIF V_PROGRESO_ACTUAL >=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE TAREA_subordinada
                        SET PORCENTAJE_AVANCE_TS = 100
                        WHERE v_fila.id_ts = id_ts;
                    ELSIF V_FECHA_INICIO = NULL AND V_ESTADO = 'Pendiente' THEN
                        UPDATE TAREA_subordinada
                        SET PORCENTAJE_AVANCE_TS = 0
                        WHERE v_fila.id_ts = id_ts;
                    END IF;
                    END LOOP;
    END AFTER STATEMENT;
END TGR_CALC_AVANCE_TAREA_SUB;


/* TRIGGER CALCULO AVANCE FLUJO TAREA FUNCIONAL*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_FLUJO_TAREA
FOR UPDATE OF ESTADO_FT ON FLUJO_TAREA
COMPOUND TRIGGER
TYPE r_flujo_tarea_type IS RECORD(
    id_ft flujo_tarea.id_ft%TYPE,
    fecha_inicio_ft flujo_tarea.fecha_inicio_ft%TYPE,
    fecha_entrega_ft flujo_tarea.fecha_entrega_ft%TYPE
);

TYPE t_flujo_tarea_type IS TABLE OF r_flujo_tarea_type
    INDEX BY PLS_INTEGER;
    
t_flujo_tarea t_flujo_tarea_type;

AFTER EACH ROW IS
BEGIN
t_flujo_tarea (t_flujo_tarea.COUNT +1).id_ft := :NEW.id_ft;
t_flujo_tarea (t_flujo_tarea.COUNT).fecha_inicio_ft := :NEW.fecha_inicio_ft;
t_flujo_tarea (t_flujo_tarea.COUNT).fecha_entrega_ft := :NEW.fecha_entrega_ft;
END AFTER EACH ROW;
    AFTER STATEMENT IS
                V_PROGRESO_ACTUAL NUMBER(10);
                V_FECHA_INICIO DATE;
                V_ESTADO STRING(10);
                CURSOR c_ft IS SELECT id_ft FROM flujo_tarea;
            BEGIN
                for v_fila in c_ft 
                LOOP
                    SELECT ROUND(ROUND(SYSDATE - fecha_inicio_ft)*100/(fecha_entrega_ft - fecha_inicio_ft)), fecha_inicio_ft, estado_ft
                    INTO V_PROGRESO_ACTUAL, V_FECHA_INICIO, V_ESTADO
                    FROM flujo_tarea
                    WHERE v_fila.id_ft = id_ft;
                    IF V_PROGRESO_ACTUAL <=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE flujo_tarea 
                        SET porcentaje_avance_ft = V_PROGRESO_ACTUAL
                        WHERE v_fila.id_ft = id_ft;
                    ELSIF V_PROGRESO_ACTUAL >=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE flujo_TAREA
                        SET PORCENTAJE_AVANCE_FT = 100
                        WHERE v_fila.id_ft = id_ft;
                    ELSIF V_FECHA_INICIO = NULL AND V_ESTADO = 'Pendiente' THEN
                        UPDATE flujo_TAREA
                        SET PORCENTAJE_AVANCE_FT = 0
                        WHERE v_fila.id_ft = id_ft;
                    END IF;
                    END LOOP;
    END AFTER STATEMENT;
END TGR_CALC_AVANCE_FLUJO_TAREA;

/* TRIGGER CALCULO AVANCE TAREA FUNCIONAL*/

CREATE OR REPLACE TRIGGER TGR_CALC_AVANCE_TAREA
FOR UPDATE OF ESTADO_T ON TAREA
COMPOUND TRIGGER
TYPE r_tarea_type IS RECORD(
    id_t tarea.id_t%TYPE,
    fecha_inicio_t tarea.fecha_inicio_t%TYPE,
    fecha_entrega_t tarea.fecha_entrega_t%TYPE
);

TYPE t_tarea_type IS TABLE OF r_tarea_type
    INDEX BY PLS_INTEGER;
    
t_tarea t_tarea_type;

AFTER EACH ROW IS
BEGIN
t_tarea (t_tarea.COUNT +1).id_t := :NEW.id_t;
t_tarea (t_tarea.COUNT).fecha_inicio_t := :NEW.fecha_inicio_t;
t_tarea (t_tarea.COUNT).fecha_entrega_t := :NEW.fecha_entrega_t;
END AFTER EACH ROW;
    AFTER STATEMENT IS
                V_PROGRESO_ACTUAL NUMBER(10);
                V_FECHA_INICIO DATE;
                V_ESTADO STRING(10);
                CURSOR c_t IS SELECT id_t FROM tarea;
            BEGIN
                for v_fila in c_t 
                LOOP
                    SELECT ROUND(ROUND(SYSDATE - fecha_inicio_t)*100/(fecha_entrega_t - fecha_inicio_t)), fecha_inicio_t, estado_t
                    INTO V_PROGRESO_ACTUAL, V_FECHA_INICIO, V_ESTADO
                    FROM tarea
                    WHERE v_fila.id_t = id_t;
                    IF V_PROGRESO_ACTUAL <=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE tarea 
                        SET porcentaje_avance_t = V_PROGRESO_ACTUAL
                        WHERE v_fila.id_t = id_t;
                    ELSIF V_PROGRESO_ACTUAL >=100 AND V_ESTADO = 'En curso' THEN
                        UPDATE TAREA
                        SET PORCENTAJE_AVANCE_T = 100
                        WHERE v_fila.id_t = id_t;
                    ELSIF V_FECHA_INICIO = NULL AND V_ESTADO = 'Pendiente' THEN
                        UPDATE TAREA
                        SET PORCENTAJE_AVANCE_T = 0
                        WHERE v_fila.id_t = id_t;
                    END IF;
                    END LOOP;
    END AFTER STATEMENT;
END TGR_CALC_AVANCE_TAREA;


/* TRIGGER DE ASIGNACI√ìN DE ID DE TAREA */

-- CREATE OR REPLACE TRIGGER TGR_ASIG_ID_TAREA
-- FOR INSERT ON tarea
-- COMPOUND TRIGGER
-- TYPE r_tarea_type IS RECORD(
--     id_t tarea.id_t%TYPE
-- );

-- TYPE t_tarea_type IS TABLE OF r_tarea_type
--     INDEX BY PLS_INTEGER;
    
-- t_tarea t_tarea_type;

-- AFTER EACH ROW IS
-- BEGIN
-- t_tarea (t_tarea.COUNT +1).id_t := :NEW.id_t;
-- END AFTER EACH ROW;
--     AFTER STATEMENT IS
--                 V_ID NUMBER(10);
--                 CURSOR c_t IS SELECT id_t FROM tarea;
--             BEGIN
--             DELETE FROM asignacion_tarea;
--                 for v_fila in c_t 
--                 LOOP
--                     SELECT id_t
--                     INTO V_ID
--                     FROM tarea
--                     WHERE v_fila.id_t = id_t;
--                     INSERT INTO asignacion_tarea(id_u_at, id_t_at, respuesta_at) VALUES (NULL, V_ID, 'Pendiente');
--                     END LOOP;
--     END AFTER STATEMENT;
-- END TGR_ASIG_ID_TAREA;


/* TRIGGER DE ASIGNACI√ìN DE ID DE TAREA SUBORDINADA */

-- CREATE OR REPLACE TRIGGER TGR_ASIG_ID_TAREA_SUB
-- FOR INSERT ON tarea_subordinada
-- COMPOUND TRIGGER
-- TYPE r_tarea_sub_type IS RECORD(
--     id_ts tarea_subordinada.id_t%TYPE
-- );

-- TYPE t_tarea_sub_type IS TABLE OF r_tarea_sub_type
--     INDEX BY PLS_INTEGER;
    
-- t_tarea_sub t_tarea_sub_type;

-- AFTER EACH ROW IS
-- BEGIN
-- t_tarea_sub (t_tarea_sub.COUNT +1).id_ts := :NEW.id_ts;
-- END AFTER EACH ROW;
--     AFTER STATEMENT IS
--                 V_ID NUMBER(10);
--                 CURSOR c_ts IS SELECT id_ts FROM tarea_subordinada;
--             BEGIN
--             DELETE FROM asignacion_tarea_subordinada;
--                 for v_fila in c_ts 
--                 LOOP
--                     SELECT id_ts
--                     INTO V_ID
--                     FROM tarea_subordinada
--                     WHERE v_fila.id_ts = id_ts;
--                     INSERT INTO asignacion_tarea_subordinada(id_u_ats, id_ts_ats, respuesta_ats) VALUES (NULL, V_ID, 'Pendiente');
--                     END LOOP;
--     END AFTER STATEMENT;
-- END TGR_ASIG_ID_TAREA_SUB;


/* TRIGGER ASIGNACI√ìN DE ID DE EJECUCION DE FLUJO DE TAREA */

-- CREATE OR REPLACE TRIGGER TGR_ASIG_ID_EJEC_FLUJO_TAREA
-- FOR INSERT ON flujo_tarea
-- COMPOUND TRIGGER
-- TYPE r_flujo_tarea_type IS RECORD(
--     id_ft flujo_tarea.id_ft%TYPE
-- );

-- TYPE t_flujo_tarea_type IS TABLE OF r_flujo_tarea_type
--     INDEX BY PLS_INTEGER;
    
-- t_flujo_tarea t_flujo_tarea_type;

-- AFTER EACH ROW IS
-- BEGIN
-- t_flujo_tarea (t_flujo_tarea.COUNT +1).id_ft := :NEW.id_ft;
-- END AFTER EACH ROW;
--     AFTER STATEMENT IS
--                 V_ID NUMBER(10);
--                 CURSOR c_ft IS SELECT id_ft FROM flujo_tarea;
--             BEGIN
--             DELETE FROM ejecucion_flujo_tarea;
--                 for v_fila in c_ft 
--                 LOOP
--                     SELECT id_ft
--                     INTO V_ID
--                     FROM flujo_tarea
--                     WHERE v_fila.id_ft = id_ft;
--                     INSERT INTO ejecucion_flujo_tarea(id_u_eft, id_ft_eft, respuesta_eft) VALUES (NULL, V_ID, 'Pendiente');
--                     END LOOP;
--     END AFTER STATEMENT;
-- END TGR_ASIG_ID_EJEC_FLUJO_TAREA;


/* TRIGGER DE CALCULO DE INDICADOR DE TAREA */

CREATE OR REPLACE TRIGGER TGR_CALCULO_INDICADOR_TAREA
AFTER UPDATE ON ASIGNACION_TAREA
DECLARE
                V_DIAS_RESTANTES NUMBER(10);
                V_ID NUMBER(6);
                CURSOR c_t IS SELECT * FROM tarea;
                CURSOR c_at IS SELECT * FROM asignacion_tarea;
            BEGIN
                FOR v_fila_at in c_at
                LOOP
                SELECT id_u_at
                INTO V_ID
                FROM ASIGNACION_TAREA
                WHERE V_FILA_AT.ID_T_AT = ID_T_AT;
                IF V_ID >= 1 THEN
                    for v_fila in c_t
                    LOOP
                    SELECT ROUND(fecha_entrega_t - sysdate)
                    INTO V_DIAS_RESTANTES
                    FROM tarea
                    WHERE v_fila_at.id_t_at = id_t;
                    IF V_DIAS_RESTANTES > 7 THEN
                        UPDATE tarea
                        SET INDICADOR_T = 'Verde'
                        WHERE v_fila_at.id_t_at = id_t;
                    ELSIF V_DIAS_RESTANTES BETWEEN 0 AND 7 THEN
                        UPDATE tarea
                        SET INDICADOR_T = 'Amarillo'
                        WHERE v_fila_at.id_t_at = id_t;
                    ELSIF V_DIAS_RESTANTES <= 0 THEN
                        UPDATE tarea
                        SET INDICADOR_T = 'Rojo'
                        WHERE v_fila_at.id_t_at = id_t;
                    END IF;
                END LOOP;
                ELSE
                    UPDATE tarea
                    SET INDICADOR_T = 'En espera'
                    WHERE V_FILA_AT.ID_T_AT = ID_T;
                END IF;
            END LOOP;
END TGR_CALCULO_INDICADOR_TAREA;


/* TRIGGER DE CALCULO DE INDICADOR DE TAREA SUBORDINADA */

CREATE OR REPLACE TRIGGER TGR_CALCULO_INDICADOR_TAREA_SUB
AFTER UPDATE ON ASIGNACION_TAREA_SUBORDINADA
DECLARE
                V_DIAS_RESTANTES NUMBER(10);
                V_ID NUMBER(6);
                CURSOR c_ts IS SELECT * FROM tarea_subordinada;
                CURSOR c_ats IS SELECT * FROM asignacion_tarea_subordinada;
            BEGIN
                FOR v_fila_ats in c_ats
                LOOP
                    SELECT id_u_ats
                    INTO V_ID
                    FROM ASIGNACION_TAREA_SUBORDINADA
                    WHERE V_FILA_ATS.ID_TS_ATS = ID_TS_ATS;
                    IF V_ID >= 1 THEN
                        for v_fila in c_ts
                        LOOP
                            SELECT ROUND(fecha_entrega_ts - sysdate)
                            INTO V_DIAS_RESTANTES
                            FROM tarea_subordinada
                            WHERE v_fila_ats.id_ts_ats = id_ts;
                            
                            IF V_DIAS_RESTANTES > 7 THEN
                                UPDATE tarea_subordinada
                                SET INDICADOR_TS = 'Verde'
                                WHERE v_fila_ats.id_ts_ats = id_ts;
                            ELSIF V_DIAS_RESTANTES BETWEEN 0 AND 7 THEN
                                UPDATE tarea_subordinada
                                SET INDICADOR_TS = 'Amarillo'
                                WHERE v_fila_ats.id_ts_ats = id_ts;
                            ELSIF V_DIAS_RESTANTES <= 0 THEN
                                UPDATE tarea_subordinada
                                SET INDICADOR_TS = 'Rojo'
                                WHERE v_fila_ats.id_ts_ats = id_ts;
                            END IF;
                        END LOOP;
                    ELSE
                        UPDATE tarea_subordinada
                        SET INDICADOR_TS = 'En espera'
                        WHERE V_FILA_ATS.ID_TS_ATS = ID_TS;
                    END IF;
                END LOOP;
END TGR_CALCULO_INDICADOR_TAREA_SUB;


/* TRIGGER DE CALCULO DE INDICADOR DE FLUJO DE TAREA */

CREATE OR REPLACE TRIGGER TGR_CALCULO_INDICADOR_FLUJO_TAREA
AFTER UPDATE ON EJECUCION_FLUJO_TAREA
DECLARE
                V_DIAS_RESTANTES NUMBER(10);
                V_ID NUMBER(6);
                CURSOR c_ft IS SELECT * FROM flujo_tarea;
                CURSOR c_eft IS SELECT * FROM ejecucion_flujo_tarea;
            BEGIN
                FOR v_fila_eft in c_eft
                LOOP
                    SELECT id_u_eft
                    INTO V_ID
                    FROM EJECUCION_FLUJO_TAREA
                    WHERE V_FILA_EFT.ID_FT_EFT = ID_FT_EFT;
                    IF V_ID >= 1 THEN
                        for v_fila in c_ft
                        LOOP
                            SELECT ROUND(fecha_entrega_ft - sysdate)
                            INTO V_DIAS_RESTANTES
                            FROM flujo_tarea
                            WHERE v_fila_eft.id_ft_eft = id_ft;
                            
                            IF V_DIAS_RESTANTES > 7 THEN
                                UPDATE flujo_tarea
                                SET INDICADOR_FT = 'Verde'
                                WHERE v_fila_eft.id_ft_eft = id_ft;
                            ELSIF V_DIAS_RESTANTES BETWEEN 0 AND 7 THEN
                                UPDATE flujo_tarea
                                SET INDICADOR_FT = 'Amarillo'
                                WHERE v_fila_eft.id_ft_eft = id_ft;
                            ELSIF V_DIAS_RESTANTES <= 0 THEN
                                UPDATE flujo_tarea
                                SET INDICADOR_FT = 'Rojo'
                                WHERE v_fila_eft.id_ft_eft = id_ft;
                            END IF;
                        END LOOP;
                    ELSE
                        UPDATE flujo_tarea
                        SET INDICADOR_FT = 'En espera'
                        WHERE V_FILA_EFT.ID_FT_EFT = ID_FT;
                    END IF;
                END LOOP;
END TGR_CALCULO_INDICADOR_FLUJO_TAREA;


/* TRIGGER DE ESTADO DE TAREA (EN CURSO O PENDIENTE)  ----- SE PUEDE JUNTAR CON EL DE ABAJO */

CREATE OR REPLACE TRIGGER TGR_ESTADO_TAREA
AFTER INSERT OR UPDATE OF id_u_at ON ASIGNACION_TAREA
DECLARE
                V_RESPONSABLE NUMBER(10);
                CURSOR c_at IS SELECT * FROM asignacion_tarea;
                CURSOR c_t IS SELECT * FROM tarea;
            BEGIN
            FOR v_fila in c_at
            LOOP
                SELECT id_u_at
                INTO V_RESPONSABLE
                FROM asignacion_tarea
                WHERE v_fila.id_t_at = id_t_at;
                FOR v_fila2 in c_t
                LOOP
                    IF V_RESPONSABLE >=1 THEN
                        UPDATE TAREA
                        SET ESTADO_T = 'En curso'
                        WHERE v_fila.id_t_at = id_t;
                    ELSE
                        UPDATE TAREA
                        SET ESTADO_T = 'Pendiente'
                        WHERE v_fila.id_t_at = id_t;
                    END IF;
                END LOOP;
            END LOOP;
END TGR_ESTADO_TAREA;

/* TRIGGER FECHA INICIO TAREA ----- SE PUEDE JUNTAR CON EL DE ARRIBA*/

CREATE OR REPLACE TRIGGER TGR_FECHA_INICIO_TAREA
AFTER INSERT OR UPDATE OF id_u_at ON ASIGNACION_TAREA
DECLARE
                V_RESPONSABLE NUMBER(10);
                CURSOR c_at IS SELECT * FROM asignacion_tarea;
                CURSOR c_t IS SELECT * FROM tarea;
            BEGIN
            FOR v_fila in c_at
            LOOP
                SELECT id_u_at
                INTO V_RESPONSABLE
                FROM asignacion_tarea
                WHERE v_fila.id_t_at = id_t_at;
                FOR v_fila2 in c_t
                LOOP
                    IF V_RESPONSABLE >=1 THEN
                        UPDATE TAREA
                        SET fecha_inicio_t = SYSDATE
                        WHERE v_fila.id_t_at = id_t;
                    ELSE
                        UPDATE TAREA
                        SET fecha_inicio_t = NULL
                        WHERE v_fila.id_t_at = id_t;
                    END IF;
                END LOOP;
            END LOOP;
END TGR_FECHA_INICIO_TAREA;

/* TRIGGER FECHA INICIO TAREA SUBORDINADA */

CREATE OR REPLACE TRIGGER TGR_FECHA_INICIO_TAREA_SUBORDINADA
AFTER INSERT OR UPDATE OF id_u_ats ON ASIGNACION_TAREA_SUBORDINADA
DECLARE
                V_RESPONSABLE NUMBER(10);
                CURSOR c_ats IS SELECT * FROM asignacion_tarea_subordinada;
                CURSOR c_ts IS SELECT * FROM tarea_subordinada;
            BEGIN
            FOR v_fila in c_ats
            LOOP
                SELECT id_u_ats
                INTO V_RESPONSABLE
                FROM asignacion_tarea_subordinada
                WHERE v_fila.id_ts_ats = id_ts_ats;
                FOR v_fila2 in c_ts
                LOOP
                    IF V_RESPONSABLE >=1 THEN
                        UPDATE TAREA_SUBORDINADA
                        SET fecha_inicio_ts = SYSDATE
                        WHERE v_fila.id_ts_ats = id_ts;
                    ELSE
                        UPDATE TAREA_SUBORDINADA
                        SET fecha_inicio_ts = NULL
                        WHERE v_fila.id_ts_ats = id_ts;
                    END IF;
                END LOOP;
            END LOOP;
END TGR_FECHA_INICIO_TAREA_SUBORDINADA;


/* TRIGGER FECHA INICIO FLUJO TAREA */

CREATE OR REPLACE TRIGGER TGR_FECHA_INICIO_FLUJO_TAREA
AFTER INSERT OR UPDATE OF id_u_eft ON EJECUCION_FLUJO_TAREA
DECLARE
                V_RESPONSABLE NUMBER(10);
                CURSOR c_eft IS SELECT * FROM ejecucion_flujo_tarea;
                CURSOR c_ft IS SELECT * FROM flujo_tarea;
            BEGIN
            FOR v_fila in c_eft
            LOOP
                SELECT id_u_eft
                INTO V_RESPONSABLE
                FROM ejecucion_flujo_tarea
                WHERE v_fila.id_ft_eft = id_ft_eft;
                FOR v_fila2 in c_ft
                LOOP
                    IF V_RESPONSABLE >=1 THEN
                        UPDATE FLUJO_TAREA
                        SET fecha_inicio_ft = SYSDATE
                        WHERE v_fila.id_ft_eft = id_ft;
                    ELSE
                        UPDATE FLUJO_TAREA
                        SET fecha_inicio_ft = NULL
                        WHERE v_fila.id_ft_eft = id_ft;
                    END IF;
                END LOOP;
            END LOOP;
END TGR_FECHA_INICIO_FLUJO_TAREA;


/* TRIGGER FECHA ENTREGA EFECTIVA TAREA */

CREATE OR REPLACE TRIGGER TGR_FECHA_ENTREGA_EFECTIVA_TAREA
AFTER UPDATE OF estado_t ON TAREA
DECLARE
                estado VARCHAR2(10);
                CURSOR c_t IS SELECT id_t FROM tarea;
            BEGIN
            for v_fila in c_t
            LOOP
                SELECT estado_t
                INTO estado
                FROM tarea
                WHERE v_fila.id_t = id_t;
                IF estado = 'Terminada'
                    THEN
                        UPDATE tarea 
                        SET fecha_entrega_efectiva_t = SYSDATE
                        WHERE v_fila.id_t = id_t;
                ELSIF estado = 'Pendiente'
                    THEN
                        UPDATE tarea
                        SET fecha_entrega_efectiva_t = NULL
                        WHERE v_fila.id_t = id_t;
                END IF;
            END LOOP;
END TGR_FECHA_ENTREGA_EFECTIVA_TAREA;


/* TRIGGER FECHA ENTREGA EFECTIVA TAREA SUBORDINADA */

CREATE OR REPLACE TRIGGER TGR_FECHA_ENTREGA_EFECTIVA_TAREA_SUBORDINADA
AFTER UPDATE OF estado_ts ON TAREA_SUBORDINADA
DECLARE
                estado VARCHAR2(10);
                CURSOR c_ts IS SELECT id_ts FROM tarea_subordinada;
            BEGIN
            for v_fila in c_ts
            LOOP
                SELECT estado_ts
                INTO estado
                FROM tarea_subordinada
                WHERE v_fila.id_ts = id_ts;
                IF estado = 'Terminada'
                    THEN
                        UPDATE tarea_subordinada
                        SET fecha_entrega_efectiva_ts = SYSDATE
                        WHERE v_fila.id_ts = id_ts;
                ELSIF estado = 'Pendiente'
                    THEN
                        UPDATE tarea_subordinada
                        SET fecha_entrega_efectiva_ts = NULL
                        WHERE v_fila.id_ts = id_ts;
                END IF;
            END LOOP;
END TGR_FECHA_ENTREGA_EFECTIVA_TAREA_SUBORDINADA;


/* TRIGGER FECHA ENTREGA EFECTIVA FLUJO TAREA */

CREATE OR REPLACE TRIGGER TGR_FECHA_ENTREGA_EFECTIVA_FLUJO_TAREA
AFTER UPDATE OF estado_ft ON FLUJO_TAREA
DECLARE
                estado VARCHAR2(10);
                CURSOR c_ft IS SELECT id_ft FROM flujo_tarea;
            BEGIN
            for v_fila in c_ft
            LOOP
                SELECT estado_ft
                INTO estado
                FROM flujo_tarea
                WHERE v_fila.id_ft = id_ft;
                IF estado = 'Terminada'
                    THEN
                        UPDATE flujo_tarea
                        SET fecha_entrega_efectiva_ft = SYSDATE
                        WHERE v_fila.id_ft = id_ft;
                ELSIF estado = 'Pendiente'
                    THEN
                        UPDATE flujo_tarea
                        SET fecha_entrega_efectiva_ft = NULL
                        WHERE v_fila.id_ft = id_ft;
                END IF;
            END LOOP;
END TGR_FECHA_ENTREGA_EFECTIVA_FLUJO_TAREA;

/* TRIGGER RESPUESTA ASIGNACION TAREA NEGATIVA */

CREATE OR REPLACE TRIGGER TGR_RESP_ASIG_TAREA_NEG
AFTER UPDATE ON ASIGNACION_TAREA
DECLARE
                V_RESPUESTA STRING(10);
                CURSOR c_at IS SELECT * FROM asignacion_tarea WHERE ID_U_AT >= 1;
            BEGIN
                FOR v_fila_at in c_at
                LOOP
                SELECT respuesta_at
                INTO V_RESPUESTA
                FROM ASIGNACION_TAREA
                WHERE V_FILA_AT.ID_T_AT = ID_T_AT;
                IF V_RESPUESTA = 'No' THEN
                    UPDATE ASIGNACION_TAREA
                    SET ID_U_AT = NULL
                    WHERE V_FILA_AT.ID_T_AT = ID_T_AT;
                END IF;
            END LOOP;
END TGR_RESP_ASIG_TAREA_NEG;


/* TRIGGER RESPUESTA ASIGNACION TAREA SUBORDINADA NEGATIVA */

CREATE OR REPLACE TRIGGER TGR_RESP_ASIG_TAREA_SUB_NEG
AFTER UPDATE ON ASIGNACION_TAREA_SUBORDINADA
DECLARE
                V_RESPUESTA STRING(10);
                CURSOR c_ats IS SELECT * FROM asignacion_tarea_subordinada WHERE ID_U_ATS >= 1;
            BEGIN
                FOR v_fila_ats in c_ats
                LOOP
                SELECT respuesta_ats
                INTO V_RESPUESTA
                FROM ASIGNACION_TAREA_SUBORDINADA
                WHERE V_FILA_ATS.ID_TS_ATS = ID_TS_ATS;
                IF V_RESPUESTA = 'No' THEN
                    UPDATE ASIGNACION_TAREA_SUBORDINADA
                    SET ID_U_ATS = NULL
                    WHERE V_FILA_ATS.ID_TS_ATS = ID_TS_ATS;
                END IF;
            END LOOP;
END TGR_RESP_ASIG_TAREA_SUB_NEG;


/* TRIGGER RESPUESTA ASIGNACION FLUJO TAREA NEGATIVA */

CREATE OR REPLACE TRIGGER TGR_RESP_ASIG_FLUJO_TAREA_NEG
AFTER UPDATE ON EJECUCION_FLUJO_TAREA
DECLARE
                V_RESPUESTA STRING(10);
                CURSOR c_eft IS SELECT * FROM ejecucion_flujo_tarea WHERE ID_U_EFT >= 1;
            BEGIN
                FOR v_fila_eft in c_eft
                LOOP
                SELECT respuesta_eft
                INTO V_RESPUESTA
                FROM EJECUCION_FLUJO_TAREA
                WHERE V_FILA_EFT.ID_FT_EFT = ID_FT_EFT;
                IF V_RESPUESTA = 'No' THEN
                    UPDATE EJECUCION_FLUJO_TAREA
                    SET ID_U_EFT = NULL
                    WHERE V_FILA_EFT.ID_FT_EFT = ID_FT_EFT;
                END IF;
            END LOOP;
END TGR_RESP_ASIG_FLUJO_TAREA_NEG;

/* TRIGGER NOTIFICACION TAREA */

CREATE OR REPLACE TRIGGER TGR_ALERTA_TAREA
AFTER UPDATE OF INDICADOR_T ON TAREA
DECLARE
                V_INDICADOR STRING(10);
                V_US_A_NOT STRING(10);
                V_ID_TAREA STRING(10);
                CURSOR c_vrt IS SELECT * FROM vista_responsable_tarea;
            BEGIN
                FOR v_fila_vrt in c_vrt
                LOOP
                SELECT indicador_t, id_u, id_t
                INTO V_INDICADOR, V_US_A_NOT, V_ID_TAREA
                FROM VISTA_RESPONSABLE_TAREA
                WHERE V_FILA_VRT.ID_T = ID_T;
                IF V_INDICADOR = 'Amarillo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una alerta!','Tienes una tarea con menos de 1 semana de plazo ', V_US_A_NOT);
                ELSIF V_INDICADOR = 'Rojo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una tarea atrasada! | ','Se ha expirado el tiempo de entrega de tarea', V_US_A_NOT);
                END IF;
        END LOOP;
END TGR_ALERTA_TAREA;

/* TRIGGER NOTIFICACION TAREA SUBORDINADA */

CREATE OR REPLACE TRIGGER TGR_ALERTA_SUBORDINADA
AFTER UPDATE OF INDICADOR_TS ON TAREA_SUBORDINADA
DECLARE
                V_INDICADOR STRING(10);
                V_US_A_NOT STRING(10);
                V_ID_TAREA STRING(10);
                CURSOR c_vrts IS SELECT * FROM vista_responsable_tarea_sub;
            BEGIN
                FOR v_fila_vrts in c_vrts
                LOOP
                SELECT indicador_ts, id_u, id_ts
                INTO V_INDICADOR, V_US_A_NOT, V_ID_TAREA
                FROM VISTA_RESPONSABLE_TAREA_SUB
                WHERE V_FILA_VRTS.ID_TS = ID_TS;
                IF V_INDICADOR = 'Amarillo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una alerta!','Tienes una tarea con menos de 1 semana de plazo ', V_US_A_NOT);
                ELSIF V_INDICADOR = 'Rojo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una tarea atrasada! | ','Se ha expirado el tiempo de entrega de tarea', V_US_A_NOT);
                END IF;
        END LOOP;
END TGR_ALERTA_SUBORDINADA;

/* TRIGGER NOTIFICACION FLUJO TAREA */

CREATE OR REPLACE TRIGGER TGR_ALERTA_FLUJO_TAREA
AFTER UPDATE OF INDICADOR_FT ON FLUJO_TAREA
DECLARE
                V_INDICADOR STRING(10);
                V_US_A_NOT STRING(10);
                V_ID_TAREA STRING(10);
                CURSOR c_vrft IS SELECT * FROM vista_responsable_flujo_tarea;
            BEGIN
                FOR v_fila_vrft in c_vrft
                LOOP
                SELECT indicador_ft, id_u, id_ft
                INTO V_INDICADOR, V_US_A_NOT, V_ID_TAREA
                FROM VISTA_RESPONSABLE_FLUJO_TAREA
                WHERE V_FILA_VRFT.ID_FT = ID_FT;
                IF V_INDICADOR = 'Amarillo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una alerta!','Tienes una tarea con menos de 1 semana de plazo ', V_US_A_NOT);
                ELSIF V_INDICADOR = 'Rojo' THEN
                INSERT INTO NOTIFICACION VALUES ('', 'Tienes una tarea atrasada! | ','Se ha expirado el tiempo de entrega de tarea', V_US_A_NOT);
                END IF;
        END LOOP;
END TGR_ALERTA_FLUJO_TAREA;

/* TRIGGER REPORTE PROBLEMA*/

CREATE OR REPLACE TRIGGER TGR_REPORTE_PROBLEMA
AFTER INSERT ON REPORTE_PROBLEMA FOR EACH ROW
DECLARE 
        BEGIN
                INSERT INTO NOTIFICACION VALUES ('', 'Se ha ingresado un reporte','Tienes un reporte de tarea','1');
END TGR_REPORTE_PROBLEMA;
-----------------------------------------------------------------------------------------------------------------------------------
/*/// Insertar de tabla tareas ///*/

INSERT INTO UNIDAD_INTERNA VALUES ('', 'Departamento de contabilidad');
INSERT INTO UNIDAD_INTERNA VALUES ('', 'Departamento de informatica');

INSERT INTO ROL VALUES ('', 'Administrador');
INSERT INTO ROL VALUES ('', 'Dise√±ador de procesos');
INSERT INTO ROL VALUES ('', 'Funcionario');

INSERT INTO CARGO VALUES ('', 'Contador Auditor', '', 1, 2);
INSERT INTO CARGO VALUES ('', 'Contador', 1 , 1, 3);
INSERT INTO CARGO VALUES ('', 'Ayudante de Contador', 2, 1, 3);
INSERT INTO CARGO VALUES ('', 'Programador Senior', '',2, 1);
INSERT INTO CARGO VALUES ('', 'Programador Semi Senior', 4,2, 3);
INSERT INTO CARGO VALUES ('', 'Programador Junior', 5 ,2, 3);

INSERT INTO EMPRESA VALUES ('', 'Ubisoft');
INSERT INTO EMPRESA VALUES ('', 'Coca-Cola Company');

INSERT INTO USUARIO VALUES ('', 'Alonso Silva Bustos', 'alo.silva@duocuc.cl', '12345', '6', '2');
INSERT INTO USUARIO VALUES ('', 'Jimmy Cabrera', 'jim.cabrera@duocuc.cl', '12345', '6', '1');
INSERT INTO USUARIO VALUES ('', 'Manuel Mu√±oz', 'Manue.munozg@duocuc.cl', '12345', '6', '1');

INSERT INTO TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '', '1-12-2022', '' , '0', '', '');
INSERT INTO TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '', '1-12-2022', '' , '0', '', '');
INSERT INTO TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '', '31-12-2022', '', '0', '', '');
INSERT INTO TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '', '29-11-2022', '', '0', '', '');
INSERT INTO TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '', '28-11-2022', '', '0', '', '');

INSERT INTO FLUJO_TAREA VALUES ('', 'Programaci√≥n de portafolio', 'Proceso de programaci√≥n de p√°gina web en base al caso N¬∞5', '02-08-2022', '03-09-2022', '', '0', '', '');

INSERT INTO TAREA_SUBORDINADA VALUES ('', 'Programaci√≥n de modulo de mantenci√≥n', 'Proceso de programaci√≥n de la vista de la p√°gina web del modulo de manteci√≥n en base al caso N¬∞5', '02-08-2022', '03-09-2022', '', '0', 'En curso', '', 1, '');
INSERT INTO TAREA_SUBORDINADA VALUES ('', 'Programaci√≥n de modulo de mantenci√≥n', 'Proceso de programaci√≥n de la vista de la p√°gina web del modulo de manteci√≥n en base al caso N¬∞5', '02-08-2022', '03-09-2022', '', '0', 'En curso', '', '', 1);

INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', 'Tengo un problema en el desarollo' ,'1', '', '');
INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', '' ,'', '', '');
INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', '', '', '1', '');
INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', '', '', '1', '');
INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', '', '', '', '1');
INSERT INTO REPORTE_PROBLEMA VALUES ('', 'No puedo solucionar este problema', '', '', '', '1');


INSERT INTO NOTIFICACION VALUES ('', 'Se te ha asignado una tarea!', 'Se asigno una tarea', '1');

-------------------------------------------------------------------------------------------------------------------------------------------
/* INSERT DE PRUEBA SIN TRIGGERS ACTIVADOS */
/* 
INSERT INTO ASIGNACION_TAREA VALUES ('1','2','Si','');

INSERT INTO ASIGNACION_TAREA_SUBORDINADA VALUES ('1','1','Si','');

INSERT INTO EJECUCION_FLUJO_TAREA VALUES ('1','1','Si','');
*/

-----------------------------------------------------------------------------------------------------------------------------------
/* UPDATE PARA PROBAR TRIGGERS */

UPDATE ASIGNACION_TAREA
SET ID_U_AT = 1
WHERE ID_T_AT = 2;

UPDATE ASIGNACION_TAREA
SET respuesta_at = 'No'
WHERE ID_T_AT = 2;

UPDATE TAREA
SET ESTADO_T = 'Terminada'
WHERE ID_T = 3;

UPDATE TAREA
SET INDICADOR_T = 'Amarillo'
WHERE ID_T = 3;

UPDATE porcentaje_global
SET avance_pg = 55
WHERE ID_pg = 1;
-----------------------------------------------------------------------------------------------------------------------------------
/*/// Consultas ///*/


SELECT * FROM UNIDAD_INTERNA;
SELECT * FROM ROL;
SELECT * FROM USUARIO;
SELECT * FROM TAREA;
SELECT * FROM TAREA_subordinada;
select * from flujo_tarea;
select * from notificacion;
select * from porcentaje_global;
select * from asignacion_tarea;